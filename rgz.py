# -*- coding: utf-8 -*-
"""RGZ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oq6DfhY8mY7e6Ikh0mzd12gzUZbTTKn_
"""

import matplotlib.pyplot as plt
import pandas as pd
import re
import seaborn as sns
from collections import Counter
import matplotlib.patches as patches
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from google.colab import drive
drive.mount('/content/drive', force_remount = True)
class1 = pd.read_csv('drive/My Drive/class1.csv')
class2 = pd.read_csv('drive/My Drive/class2.csv')

#Functions for 1) counting the top-30 from classes, 2) merging two tables into one
def count_dict(in_dict):
    arr = {}
    top30_dict = Counter(in_dict).most_common(30)
    for t in top30_dict:
        arr[t[0]] = t[1]
    return arr

def merging_dictlists(firstd, secd):
    dict_ret = firstd.copy()
    for key2, value2 in secd.items():
        if dict_ret.get(key2) != None:
            dict_ret[key2] = dict_ret.get(key2) + value2
        else:
            dict_ret[key2] = value2;
    return dict_ret

#the frequency of the first class with its table and its barchart
frequency1 = {}
for x in range(class1.index.stop):
    w1 = class1.loc[x]['TEXT']
    text_string1=w1.lower()
    match_pattern1 = re.findall(r'\b[а-я,ї,є,і,ґ,a-z,\’]{1,20}\b', text_string1)
    for word in match_pattern1:
        count = frequency1.get(word,0)
        frequency1[word] = count + 1

class_top30_1 = count_dict(frequency1)
df = pd.DataFrame.from_dict(class_top30_1, orient='index')
print(df)

ax = sns.barplot(list(class_top30_1.keys()), list(class_top30_1.values()))
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, fontsize=11)
ax.set_title('Гістограма частотності топ-30 слів класу №1')

#frequency of the second class with its table and its barchart
frequency2 = {}
for y in range(class2.index.stop):
    w2 = class2.loc[y]['TEXT']
    text_string2=w2.lower()
    match_pattern2 = re.findall(r'\b[а-я,ї,є,і,ґ,a-z,\’]{1,20}\b', text_string2)
    for words in match_pattern2:
        count2 = frequency2.get(words,0)
        frequency2[words] = count2 + 1
class_top30_2 = count_dict(frequency2)
df1 = pd.DataFrame.from_dict(class_top30_2, orient='index')
print(df1)

fig, ax = plt.subplots(figsize=(16,10), dpi= 80)
ax.hlines(y=list(class_top30_2.keys()), xmin=1, xmax=26, color='gray', alpha=0.7, linewidth=1, linestyles='dashdot')
ax.scatter(y=list(class_top30_2.keys()), x=list(class_top30_2.values()), s=75, color='blue', alpha=0.7)
ax.set_title('Гістограма частотності класу №2', fontdict={'size':22})
ax.set_xlabel('Частотність слів')
ax.set_yticks(list(class_top30_2.keys()))
ax.set_xlim(1, 26)
plt.show()

#merging two tables into one 
fulldict = merging_dictlists(class_top30_1, class_top30_2)
df3 = pd.DataFrame.from_dict(fulldict, orient='index')
print(df3)

fig, ax = plt.subplots(figsize=(65,8), dpi= 70)
ax.vlines(x=list(fulldict.keys()), ymin=0, ymax=list(fulldict.values()), color='green', alpha=0.9, linewidth=2.2)
ax.scatter(x=list(fulldict.keys()), y=list(fulldict.values()), s=75, color='black', alpha=0.9)

ax.set_title('Гістограма частотності обох класів', fontdict={'size':20})
ax.set_ylabel('Частотність слів')
ax.set_xticks(list(fulldict.keys()))
ax.set_ylim(0, 30)

plt.show()

#Creating arrays for spams and hams + using library for classifier
spams = []
for s in range(len(class1['TEXT'])):
    spams.append('Спам')
class1['CLASS'] = spams

hams = []
for s in range(len(class2['TEXT'])):
    hams.append('Не спам')
class2['CLASS'] = hams

class3 = pd.DataFrame(class2).append(class1)

count_vector = CountVectorizer()
result = count_vector.fit_transform(class3['TEXT'].values)

BinClass = MultinomialNB()
objects = class3['CLASS'].values

BinClass.fit(result, objects)

print('Введіть дані:')
input_string = [input()]
count_input = count_vector.transform(input_string)
answers = BinClass.predict(count_input)

print("Введенні дані являються:" , str(answers))

#Experiments:

#Words from the FirstCLass
exp1 = ['Юридичний']
count_exp1 = count_vector.transform(exp1)
answexp1 = BinClass.predict(count_exp1)
print("Введенні дані являються:" , str(answexp1))

exp2 = ['Акумулятивний']
count_exp2 = count_vector.transform(exp2)
answexp2 = BinClass.predict(count_exp2)
print("Введенні дані являються:" , str(answexp2))

#Sentences from class 1 and class 2
exp3 = ['Були сформовані й науково осмислені принципи реалізації ']
count_exp3 = count_vector.transform(exp3)
answexp3 = BinClass.predict(count_exp3)
print("Введенні дані являються:" , str(answexp3))

exp4 = ['Детоксикація АФК  ']
count_exp4 = count_vector.transform(exp4)
answexp4 = BinClass.predict(count_exp4)
print("Введенні дані являються:" , str(answexp4))

exp5=['Основна мета вивчення різноманітних асоціативно-семантичних структур']
count_exp5 = count_vector.transform(exp5)
answexp5 = BinClass.predict(count_exp5)
print("Введенні дані являються:" , str(answexp5))

exp6 =['Вони також відіграють роль юридичних фактів']
count_exp6 = count_vector.transform(exp6)
answexp6 = BinClass.predict(count_exp6)
print("Введенні дані являються:" , str(answexp6))

exp7=['молодіжний народний театр сформулювати кілька основних позицій, одним із способів створення']
count_exp7 = count_vector.transform(exp7)
answexp7 = BinClass.predict(count_exp7)
print("Введенні дані являються:" , str(answexp7))